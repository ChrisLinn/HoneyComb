C51 COMPILER V9.00   WORKERB                                                               11/20/2014 17:09:37 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE WORKERB
OBJECT MODULE PLACED IN WorkerB.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE WorkerB.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          #include <intrins.h> 
   3          #include<stdio.h>
   4          #include<string.h>
   5                                                                  
   6          typedef unsigned char uchar;
   7          typedef unsigned char uint;
   8          unsigned char TxBuf[20]={0};
   9          unsigned char RxBuf[20]={0};
  10          //****************************************NRF24L01端口定义***************************************
  11          sbit    MISO    =P1^3;
  12          sbit    MOSI    =P1^4;
  13          sbit    SCK         =P1^2;
  14          sbit    CE          =P1^1;
  15          sbit    CSN             =P3^2;
  16          sbit    IRQ             =P3^3;
  17          //************************************按键***************************************************
  18          sbit    KEY1=P3^6;
  19          sbit    KEY2=P3^7;
  20          sbit    KEY3=P3^5;
  21          //************************************数码管位选*********************************************
  22          sbit    led3=P2^0;
  23          sbit    led2=P2^1;
  24          sbit    led1=P2^2;
  25          sbit    led0=P2^3;
  26          //************************************蜂明器***************************************************
  27          sbit    BELL=P3^4;
  28          //***********************************数码管0-9编码*******************************************
  29          uchar seg[10]={0xC0,0xCF,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};         //0~~9段码
  30          //*********************************************NRF24L01*************************************
  31          #define TX_ADR_WIDTH    5       // 5 uints TX address width
  32          #define RX_ADR_WIDTH    5       // 5 uints RX address width
  33          #define TX_PLOAD_WIDTH  20      // 20 uints TX payload
  34          #define RX_PLOAD_WIDTH  20      // 20 uints TX payload
  35          uint const TX_ADDRESS[TX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};        //本地地址
  36          uint const RX_ADDRESS[RX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};        //接收地址
  37          //***************************************NRF24L01寄存器指令***********************************************
             -********
  38          #define READ_REG        0x00    // 读寄存器指令
  39          #define WRITE_REG       0x20    // 写寄存器指令
  40          #define RD_RX_PLOAD     0x61    // 读取接收数据指令
  41          #define WR_TX_PLOAD     0xA0    // 写待发数据指令
  42          #define FLUSH_TX        0xE1    // 冲洗发送 FIFO指令
  43          #define FLUSH_RX        0xE2    // 冲洗接收 FIFO指令
  44          #define REUSE_TX_PL     0xE3    // 定义重复装载数据指令
  45          #define NOP             0xFF    // 保留
  46          //*************************************SPI(nRF24L01)寄存器地址********************************************
             -********
  47          #define CONFIG          0x00  // 配置收发状态，CRC校验模式以及收发状态响应方式
  48          #define EN_AA           0x01  // 自动应答功能设置
  49          #define EN_RXADDR       0x02  // 可用信道设置
  50          #define SETUP_AW        0x03  // 收发地址宽度设置
  51          #define SETUP_RETR      0x04  // 自动重发功能设置
  52          #define RF_CH           0x05  // 工作频率设置
  53          #define RF_SETUP        0x06  // 发射速率、功耗功能设置
C51 COMPILER V9.00   WORKERB                                                               11/20/2014 17:09:37 PAGE 2   

  54          #define STATUS          0x07  // 状态寄存器
  55          #define OBSERVE_TX      0x08  // 发送监测功能
  56          #define CD              0x09  // 地址检测           
  57          #define RX_ADDR_P0      0x0A  // 频道0接收数据地址
  58          #define RX_ADDR_P1      0x0B  // 频道1接收数据地址
  59          #define RX_ADDR_P2      0x0C  // 频道2接收数据地址
  60          #define RX_ADDR_P3      0x0D  // 频道3接收数据地址
  61          #define RX_ADDR_P4      0x0E  // 频道4接收数据地址
  62          #define RX_ADDR_P5      0x0F  // 频道5接收数据地址
  63          #define TX_ADDR         0x10  // 发送地址寄存器
  64          #define RX_PW_P0        0x11  // 接收频道0接收数据长度
  65          #define RX_PW_P1        0x12  // 接收频道0接收数据长度
  66          #define RX_PW_P2        0x13  // 接收频道0接收数据长度
  67          #define RX_PW_P3        0x14  // 接收频道0接收数据长度
  68          #define RX_PW_P4        0x15  // 接收频道0接收数据长度
  69          #define RX_PW_P5        0x16  // 接收频道0接收数据长度
  70          #define FIFO_STATUS     0x17  // FIFO栈入栈出状态寄存器设置
  71          
  72          #define NO 1
  73          //**************************************************************************************
  74          void Delay(unsigned int s);
  75          void inerDelay_us(unsigned char n);
  76          void init_NRF24L01(void);
  77          uint SPI_RW(uint uchar);
  78          uchar SPI_Read(uchar reg);
  79          void SetRX_Mode(void);
  80          uint SPI_RW_Reg(uchar reg, uchar value);
  81          uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars);
  82          uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars);
  83          unsigned char nRF24L01_RxPacket(unsigned char* rx_buf);
  84          void nRF24L01_TxPacket(unsigned char * tx_buf);
  85          //*****************************************长延时*****************************************
  86          void Delay(unsigned int s)
  87          {
  88   1              unsigned int i;
  89   1              for(i=0; i<s; i++);
  90   1              for(i=0; i<s; i++);
  91   1      }
  92          //******************************************************************************************
  93          uint    bdata sta;   //状态标志
  94          sbit    RX_DR   =sta^6;
  95          sbit    TX_DS   =sta^5;
  96          sbit    MAX_RT  =sta^4;
  97          /******************************************************************************************
  98          /*延时函数
  99          /******************************************************************************************/
 100          void inerDelay_us(unsigned char n)
 101          {
 102   1              for(;n>0;n--)
 103   1                      _nop_();
 104   1      }
 105          //****************************************************************************************
 106          /*NRF24L01初始化
 107          //***************************************************************************************/
 108          void init_NRF24L01(void)
 109          {
 110   1          inerDelay_us(100);
 111   1              CE=0;    // chip enable
 112   1              CSN=1;   // Spi  disable 
 113   1              SCK=0;   // 
 114   1              SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // 写本地地址  
 115   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH); // 写接收端地址
C51 COMPILER V9.00   WORKERB                                                               11/20/2014 17:09:37 PAGE 3   

 116   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      //  频道0自动 ACK应答允许     
 117   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  //  允许接收地址只有频道0，如果需要多频道可以参考Page21  
 118   1              SPI_RW_Reg(WRITE_REG + RF_CH, 0);        //   设置信道工作为2.4GHZ，收发必须一致
 119   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH); //设置接收数据长度，本次设置为32字节
 120   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);                 //设置发射速率为1MHZ，发射功率为最大值0dB
 121   1      }
 122          /****************************************************************************************************
 123          /*函数：uint SPI_RW(uint uchar)
 124          /*功能：NRF24L01的SPI写时序
 125          /****************************************************************************************************/
 126          uint SPI_RW(uint uchar)
 127          {
 128   1              uint bit_ctr;
 129   1              for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
 130   1              {
 131   2                      MOSI = (uchar & 0x80);         // output 'uchar', MSB to MOSI
 132   2                      uchar = (uchar << 1);           // shift next bit into MSB..
 133   2                      SCK = 1;                      // Set SCK high..
 134   2                      uchar |= MISO;                    // capture current MISO bit
 135   2                      SCK = 0;                          // ..then set SCK low again
 136   2              }
 137   1          return(uchar);                        // return read uchar
 138   1      }
 139          /****************************************************************************************************
 140          /*函数：uchar SPI_Read(uchar reg)
 141          /*功能：NRF24L01的SPI时序
 142          /****************************************************************************************************/
 143          uchar SPI_Read(uchar reg)
 144          {
 145   1              uchar reg_val;
 146   1              
 147   1              CSN = 0;                // CSN low, initialize SPI communication...
 148   1              SPI_RW(reg);            // Select register to read from..
 149   1              reg_val = SPI_RW(0);    // ..then read registervalue
 150   1              CSN = 1;                // CSN high, terminate SPI communication
 151   1              
 152   1              return(reg_val);        // return register value
 153   1      }
 154          /****************************************************************************************************/
 155          /*功能：NRF24L01读写寄存器函数
 156          /****************************************************************************************************/
 157          uint SPI_RW_Reg(uchar reg, uchar value)
 158          {
 159   1              uint status;
 160   1              
 161   1              CSN = 0;                   // CSN low, init SPI transaction
 162   1              status = SPI_RW(reg);      // select register
 163   1              SPI_RW(value);             // ..and write value to it..
 164   1              CSN = 1;                   // CSN high again
 165   1              
 166   1              return(status);            // return nRF24L01 status uchar
 167   1      }
 168          /****************************************************************************************************/
 169          /*函数：uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 170          /*功能: 用于读数据，reg：为寄存器地址，pBuf：为待读出数据地址，uchars：读出数据的个数
 171          /****************************************************************************************************/
 172          uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 173          {
 174   1              uint status,uchar_ctr;
 175   1              
 176   1              CSN = 0;                                // Set CSN low, init SPI tranaction
 177   1              status = SPI_RW(reg);                   // Select register to write to and read status uchar
C51 COMPILER V9.00   WORKERB                                                               11/20/2014 17:09:37 PAGE 4   

 178   1              
 179   1              for(uchar_ctr=0;uchar_ctr<uchars;uchar_ctr++)
 180   1                      pBuf[uchar_ctr] = SPI_RW(0);    // 
 181   1              
 182   1              CSN = 1;                           
 183   1              
 184   1              return(status);                    // return nRF24L01 status uchar
 185   1      }
 186          /*********************************************************************************************************
 187          /*函数：uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 188          /*功能: 用于写数据：为寄存器地址，pBuf：为待写入数据地址，uchars：写入数据的个数
 189          /*********************************************************************************************************
             -/
 190          uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 191          {
 192   1              uint status,uchar_ctr;
 193   1              
 194   1              CSN = 0;            //SPI使能       
 195   1              status = SPI_RW(reg);   
 196   1              for(uchar_ctr=0; uchar_ctr<uchars; uchar_ctr++) //
 197   1                      SPI_RW(*pBuf++);
 198   1              CSN = 1;           //关闭SPI
 199   1              return(status);    // 
 200   1      }
 201          /****************************************************************************************************/
 202          /*函数：void SetRX_Mode(void)
 203          /*功能：数据接收配置 
 204          /****************************************************************************************************/
 205          void SetRX_Mode(void)
 206          {
 207   1              CE=0;
 208   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);                   // IRQ收发完成中断响应，16位CRC ，主接收
 209   1              CE = 1; 
 210   1              inerDelay_us(130);
 211   1      }
 212          /******************************************************************************************************/
 213          /*函数：unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 214          /*功能：数据读取后放如rx_buf接收缓冲区中
 215          /******************************************************************************************************/
 216          unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 217          {
 218   1          unsigned char revale=0;
 219   1              sta=SPI_Read(STATUS);   // 读取状态寄存其来判断数据接收状况
 220   1              if(RX_DR)                               // 判断是否接收到数据
 221   1              {
 222   2                  CE = 0;                     //SPI使能
 223   2                      SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// read receive payload from RX_FIFO buffer
 224   2                      revale =1;                      //读取数据完成标志
 225   2              }
 226   1              SPI_RW_Reg(WRITE_REG+STATUS,sta);   //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清楚中断标志
 227   1              return revale;
 228   1      }
 229          /*********************************************************************************************************
             -**
 230          /*函数：void nRF24L01_TxPacket(unsigned char * tx_buf)
 231          /*功能：发送 tx_buf中数据
 232          /*********************************************************************************************************
             -*/
 233          void nRF24L01_TxPacket(unsigned char * tx_buf)
 234          {
 235   1              CE=0;                   //StandBy I模式 
 236   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 装载接收端地址
C51 COMPILER V9.00   WORKERB                                                               11/20/2014 17:09:37 PAGE 5   

 237   1              SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH);                      // 装载数据    
 238   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);                    // IRQ收发完成中断响应，16位CRC，主发送
 239   1              CE=1;            //置高CE，激发数据发送
 240   1              inerDelay_us(10);
 241   1      }
 242          //************************************主函数************************************************************
 243          void main(void)
 244          {
 245   1              int Asking,Quizing;
 246   1              unsigned char tf =0;
 247   1              Asking = Quizing =0;
 248   1          init_NRF24L01() ;
 249   1              led0=0;led1=0;led2=0;led3=0;
 250   1              P0 = 0xBF;
 251   1              while(1){
 252   2                      if(KEY1 == 0&&!Asking){
 253   3                          TxBuf[1] = 0x10+NO-1;
 254   3                              Asking = 1;
 255   3                              P0 = seg[1];
 256   3                          tf = 1;     
 257   3                  }
 258   2                      if(Quizing){
 259   3                          if(KEY2 == 0 ){
 260   4                                  TxBuf[1] = 0x40+NO-1;
 261   4                                  //TxBuf[1] = 0x06;
 262   4                                      tf = 1 ;
 263   4                                      Quizing = 0;    
 264   4                                      P0 = 0xBF; 
 265   4                          }
 266   3                          if(KEY3 == 0 ){
 267   4                                  TxBuf[1] = 0x70+NO-1;
 268   4                                      tf = 1 ;  
 269   4                                      Quizing = 0;    
 270   4                                      P0 = 0xBF;
 271   4                          }
 272   3                      }       
 273   2                  if (tf==1){ 
 274   3                              nRF24L01_TxPacket(TxBuf);       
 275   3                              TxBuf[1] = 0x00;
 276   3                              tf=0;
 277   3                              Delay(1000);
 278   3                  }
 279   2                      SetRX_Mode();
 280   2                      nRF24L01_RxPacket(RxBuf);
 281   2                      if(RxBuf[1]){                                   
 282   3                              if(RxBuf[1]==0x02){
 283   4                                      Asking = 0;                                                             
 284   4                                      P0=0xBF;
 285   4                              }                       
 286   3                              if(RxBuf[1]==0x03){
 287   4                                      Quizing = 1;            
 288   4                                      P0 = seg[2];
 289   4                              }
 290   3      //                      if(RxBuf[1]==0x04){
 291   3      //                              Quizing = 0;            
 292   3      //                              P0 = 0xBF;
 293   3      //                      }
 294   3                              Delay(1000);
 295   3                      }
 296   2                      RxBuf[1] = 0x00;
 297   2              }
 298   1      }
C51 COMPILER V9.00   WORKERB                                                               11/20/2014 17:09:37 PAGE 6   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    547    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     61      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
